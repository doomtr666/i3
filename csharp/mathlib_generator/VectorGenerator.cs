using System;
using System.Collections.Generic;

class VectorGenerator : GeneratorBase
{
    struct FunctionDesc
    {
        public string Name;
        public string Operation;
        public string Function;
    }

    List<FunctionDesc> unaryFunctions_ = [
        new FunctionDesc { Name = "neg", Operation = "-" },
        new FunctionDesc { Name = "abs", Function = "i3_absf" },
        new FunctionDesc { Name = "saturate", Function = "i3_saturatef" },
    ];

    List<FunctionDesc> binaryFunctions_ = [
        new FunctionDesc { Name = "add", Operation = "+" },
        new FunctionDesc { Name = "sub", Operation = "-" },
        new FunctionDesc { Name = "mul", Operation = "*" },
        new FunctionDesc { Name = "div", Operation = "/" },
        new FunctionDesc { Name = "min", Function = "i3_minf" },
        new FunctionDesc { Name = "max", Function = "i3_maxf" },
    ];

    public static string VectorName(int size)
    {
        return $"i3_vec{size}";
    }

    public static string VectorType(int size)
    {
        return $"{VectorName(size)}_t";
    }

    public static string VectorCoord(int axis)
    {
        switch (axis)
        {
            case 0: return "x";
            case 1: return "y";
            case 2: return "z";
            case 3: return "w";
            default: throw new ArgumentOutOfRangeException(nameof(axis), "Axis must be between 0 and 3.");
        }
    }

    void GenerateHeader()
    {
        WriteLine("#pragma once");
        WriteLine("// This file is generated by mathlib_generator, do not edit manually.");
        WriteLine();
        WriteLine("#include \"common.h\"");
        WriteLine();
    }

    void GenerateConstructor(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline {VectorType(size)} {VectorName(size)}(");

        for (int i = 0; i < size; ++i)
        {
            if (i > 0) Write(", ");
            Write($"float {VectorCoord(i)}");
        }

        Write(")");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);
            for (int i = 0; i < size; ++i)
                WriteLine($"r.{VectorCoord(i)} = {VectorCoord(i)};", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateSetFunction(int size, bool decl = true)
    {
        // set
        Write($"static inline {VectorType(size)} {VectorName(size)}_set(float v)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);
            for (int i = 0; i < size; ++i)
                WriteLine($"r.{VectorCoord(i)} = v;", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }

        // zero
        Write($"static inline {VectorType(size)} {VectorName(size)}_zero()");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"return {VectorName(size)}_set(0);", 1);
            WriteLine("}");
            WriteLine();
        }

        // one
        Write($"static inline {VectorType(size)} {VectorName(size)}_one()");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"return {VectorName(size)}_set(1);", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateUnaryFunction(int size, FunctionDesc func, bool decl = true)
    {    
        // write prototype
        Write($"static inline {VectorType(size)} {VectorName(size)}_{func.Name}({VectorType(size)} a)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();            
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);

            for(int i=0; i < size; ++i)
            {
                if (func.Operation != null)
                    WriteLine($"r.{VectorCoord(i)} = {func.Operation}a.{VectorCoord(i)};", 1);
                else if (func.Function != null)
                    WriteLine($"r.{VectorCoord(i)} = {func.Function}(a.{VectorCoord(i)});", 1);
            }

            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateBinaryFunction(int size, FunctionDesc func, bool decl = true)
    {
        // write prototype
        Write($"static inline {VectorType(size)} {VectorName(size)}_{func.Name}({VectorType(size)} a, {VectorType(size)} b)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);
            for(int i=0; i < size; ++i)
            {
                if (func.Operation != null)
                    WriteLine($"r.{VectorCoord(i)} = a.{VectorCoord(i)} {func.Operation} b.{VectorCoord(i)};", 1);
                else if (func.Function != null)
                    WriteLine($"r.{VectorCoord(i)} = {func.Function}(a.{VectorCoord(i)}, b.{VectorCoord(i)});", 1);
            }
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateScaleFunction(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline {VectorType(size)} {VectorName(size)}_scale({VectorType(size)} a, float s)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);
            for(int i=0; i < size; ++i)
                WriteLine($"r.{VectorCoord(i)} = a.{VectorCoord(i)} * s;", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateClampFunction(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline {VectorType(size)} {VectorName(size)}_clamp({VectorType(size)} a, {VectorType(size)} min, {VectorType(size)} max)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);
            for(int i=0; i < size; ++i)
                WriteLine($"r.{VectorCoord(i)} = i3_clampf(a.{VectorCoord(i)}, min.{VectorCoord(i)}, max.{VectorCoord(i)});", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateDotFunction(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline float {VectorName(size)}_dot({VectorType(size)} a, {VectorType(size)} b)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"float r = 0.0f;", 1);
            for(int i=0; i < size; ++i)
                WriteLine($"r += a.{VectorCoord(i)} * b.{VectorCoord(i)};", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateLen2Function(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline float {VectorName(size)}_len2({VectorType(size)} a)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"return {VectorName(size)}_dot(a, a);", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateLenFunction(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline float {VectorName(size)}_len({VectorType(size)} a)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"return i3_sqrtf({VectorName(size)}_len2(a));", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateNormalizeFunction(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline {VectorType(size)} {VectorName(size)}_normalize({VectorType(size)} a)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(size)} r;", 1);
            WriteLine($"float len = {VectorName(size)}_len(a);", 1);
            for(int i=0; i < size; ++i)
                WriteLine($"r.{VectorCoord(i)} = a.{VectorCoord(i)} / len;", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateCrossFunction(bool decl = true)
    {
        // write prototype
        Write($"static inline {VectorType(3)} {VectorName(3)}_cross({VectorType(3)} a, {VectorType(3)} b)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"{VectorType(3)} r;", 1);
            WriteLine($"r.x = a.y * b.z - a.z * b.y;", 1);
            WriteLine($"r.y = a.z * b.x - a.x * b.z;", 1);
            WriteLine($"r.z = a.x * b.y - a.y * b.x;", 1);
            WriteLine("return r;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateEqFunction(int size, bool decl = true)
    {
        // eq
        Write($"static inline bool {VectorName(size)}_eq({VectorType(size)} a, {VectorType(size)} b, float epsilon)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"for (int i = 0; i < {size}; ++i)", 1);
            WriteLine($"if (!i3_eqf(a.v[i], b.v[i], epsilon))", 2);
            WriteLine($"return false;", 3);
            WriteLine($"return true;", 1);
            WriteLine("}");
            WriteLine();
        }

        // neq
        Write($"static inline bool {VectorName(size)}_neq({VectorType(size)} a, {VectorType(size)} b, float epsilon)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"return !{VectorName(size)}_eq(a, b, epsilon);", 1);
            WriteLine("}");
            WriteLine();
        }
    }
    
    void GenerateStrFunction(int size, bool decl = true)
    {
        // write prototype
        Write($"static inline const char* {VectorName(size)}_str({VectorType(size)} a)");

        if (decl)
            WriteLine(";");
        else
        {
            WriteLine();
            WriteLine("{");
            WriteLine($"static char str[{size * 16}];", 1);

            Write($"snprintf(str, sizeof(str), \"[", 1);
            for (int i = 0; i < size; ++i)
            {
                if (i > 0) Write(" ");
                Write($"%f");
            }
            Write($"]\", ");
            for (int i = 0; i < size; ++i)
            {
                if (i > 0) Write(", ");
                Write($"a.{VectorCoord(i)}");
            }
            WriteLine(");");
            WriteLine($"return str;", 1);
            WriteLine("}");
            WriteLine();
        }
    }

    void GenerateVectorFunctions(int size, bool decl = true)
    {
        if(!decl)
            WriteLine($"// implementation of {VectorType(size)}");

        GenerateConstructor(size, decl);
        GenerateSetFunction(size, decl);

        foreach (var func in unaryFunctions_)
            GenerateUnaryFunction(size, func, decl);

        foreach (var func in binaryFunctions_)
            GenerateBinaryFunction(size, func, decl);

        GenerateScaleFunction(size, decl);
        GenerateClampFunction(size, decl);

        if(size == 3)
            GenerateCrossFunction(decl);

        GenerateDotFunction(size, decl);
        GenerateLen2Function(size, decl);
        GenerateLenFunction(size, decl);
        GenerateNormalizeFunction(size, decl);
        GenerateEqFunction(size, decl);
        GenerateStrFunction(size, decl);
    }

    void GenerateVectors()
    {
        for(int i = 2; i <= 4; ++i)
        {
            WriteLine($"// {VectorType(i)}");
            WriteLine($"typedef struct {VectorType(i)}");
            WriteLine("{",0);
            WriteLine("union", 1);
            WriteLine("{", 1);
            WriteLine($"float v[{i}];", 2);
            WriteLine($"struct", 2);
            WriteLine("{", 2);
            for (int j = 0; j < i; ++j)
                WriteLine($"float {VectorCoord(j)};", 3);
            WriteLine("};", 2);
            WriteLine("};", 1);
            WriteLine($"}} {VectorType(i)};");
            WriteLine();

            GenerateVectorFunctions(i);
            WriteLine();
        }

        for(int i = 2; i <= 4; ++i)
            GenerateVectorFunctions(i, false);
    }

    public override void Generate()
    {
        GenerateHeader();
        GenerateVectors();
    }
}
