using System;
using System.Collections.Generic;

class MatrixGenerator : GeneratorBase
{
    // Matrix types
    List<Tuple<int,int>> matrixSizes = [
        new Tuple<int,int>(3, 3),
        new Tuple<int,int>(3, 4),
        new Tuple<int,int>(4, 3),
        new Tuple<int,int>(4, 4)
    ];

    string MatrixName(int rows, int cols)
    {
        if(rows == cols)
            return $"i3_mat{rows}";
        return $"i3_mat{rows}{cols}";
    }

    string MatrixType(int rows, int cols)
    {
        return $"{MatrixName(rows, cols)}_t";
    }


    void GenerateHeader()
    {
        WriteLine("#pragma once");
        WriteLine("// This file is generated by mathlib_generator, do not edit manually.");
        WriteLine();
        WriteLine("#include \"vec.h\"");
        WriteLine();
    }

    void GenerateMatrixFunction(int rows, int cools, bool decl = true)
    {

    }

    void GenerateMatrix(int rows, int cols)
    {
        string matrixName = MatrixName(rows, cols);
        string matrixType = MatrixType(rows, cols);

        WriteLine($"// {matrixType}");
        WriteLine($"typedef struct {matrixType}");
        WriteLine("{");
        WriteLine("union", 1);
        WriteLine("{", 1);
        WriteLine($"float m[{rows*cols}];", 2);
        WriteLine("struct",2);
        WriteLine("{", 2);
        for (int i = 0; i < rows; ++i)
        {
            Write("float ",3);
            for(int j = 0; j < cols; ++j)
            {
                if (j != 0)
                    Write(", ");
                Write($"m{i}{j}");
            }
            WriteLine(";");
        }
        WriteLine("};", 2);
        WriteLine("struct",2);
        WriteLine("{", 2);
        for(int i = 0; i < rows; ++i)
            WriteLine($"{VectorGenerator.VectorType(cols)} v{i};",3);
        WriteLine("};", 2);
        WriteLine("};", 1);
        WriteLine($"}} {matrixType};");
        WriteLine();
        GenerateMatrixFunction(rows, cols);
    }

    public override void Generate()
    {
        GenerateHeader();

        foreach (var size in matrixSizes)
            GenerateMatrix(size.Item1, size.Item2);

        foreach (var size in matrixSizes)
            GenerateMatrixFunction(size.Item1, size.Item2, false);
    }
}