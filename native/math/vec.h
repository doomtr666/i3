#pragma once
// This file is generated by mathlib_generator, do not edit manually.

#include "common.h"

// i3_vec2_t
typedef struct i3_vec2_t
{
    union
    {
        float v[2];
        struct
        {
            float x;
            float y;
        };
    };
} i3_vec2_t;

static inline i3_vec2_t i3_vec2(float x, float y);
static inline i3_vec2_t i3_vec2_set(float v);
static inline i3_vec2_t i3_vec2_zero();
static inline i3_vec2_t i3_vec2_one();
static inline i3_vec2_t i3_vec2_neg(i3_vec2_t a);
static inline i3_vec2_t i3_vec2_abs(i3_vec2_t a);
static inline i3_vec2_t i3_vec2_saturate(i3_vec2_t a);
static inline i3_vec2_t i3_vec2_add(i3_vec2_t a, i3_vec2_t b);
static inline i3_vec2_t i3_vec2_sub(i3_vec2_t a, i3_vec2_t b);
static inline i3_vec2_t i3_vec2_mul(i3_vec2_t a, i3_vec2_t b);
static inline i3_vec2_t i3_vec2_div(i3_vec2_t a, i3_vec2_t b);
static inline i3_vec2_t i3_vec2_min(i3_vec2_t a, i3_vec2_t b);
static inline i3_vec2_t i3_vec2_max(i3_vec2_t a, i3_vec2_t b);
static inline i3_vec2_t i3_vec2_scale(i3_vec2_t a, float s);
static inline i3_vec2_t i3_vec2_clamp(i3_vec2_t a, i3_vec2_t min, i3_vec2_t max);
static inline float i3_vec2_dot(i3_vec2_t a, i3_vec2_t b);
static inline float i3_vec2_len2(i3_vec2_t a);
static inline float i3_vec2_len(i3_vec2_t a);
static inline i3_vec2_t i3_vec2_normalize(i3_vec2_t a);
static inline bool i3_vec2_eq(i3_vec2_t a, i3_vec2_t b, float epsilon);
static inline bool i3_vec2_neq(i3_vec2_t a, i3_vec2_t b, float epsilon);
static inline const char* i3_vec2_str(i3_vec2_t a);

// i3_vec3_t
typedef struct i3_vec3_t
{
    union
    {
        float v[3];
        struct
        {
            float x;
            float y;
            float z;
        };
    };
} i3_vec3_t;

static inline i3_vec3_t i3_vec3(float x, float y, float z);
static inline i3_vec3_t i3_vec3_set(float v);
static inline i3_vec3_t i3_vec3_zero();
static inline i3_vec3_t i3_vec3_one();
static inline i3_vec3_t i3_vec3_neg(i3_vec3_t a);
static inline i3_vec3_t i3_vec3_abs(i3_vec3_t a);
static inline i3_vec3_t i3_vec3_saturate(i3_vec3_t a);
static inline i3_vec3_t i3_vec3_add(i3_vec3_t a, i3_vec3_t b);
static inline i3_vec3_t i3_vec3_sub(i3_vec3_t a, i3_vec3_t b);
static inline i3_vec3_t i3_vec3_mul(i3_vec3_t a, i3_vec3_t b);
static inline i3_vec3_t i3_vec3_div(i3_vec3_t a, i3_vec3_t b);
static inline i3_vec3_t i3_vec3_min(i3_vec3_t a, i3_vec3_t b);
static inline i3_vec3_t i3_vec3_max(i3_vec3_t a, i3_vec3_t b);
static inline i3_vec3_t i3_vec3_scale(i3_vec3_t a, float s);
static inline i3_vec3_t i3_vec3_clamp(i3_vec3_t a, i3_vec3_t min, i3_vec3_t max);
static inline i3_vec3_t i3_vec3_cross(i3_vec3_t a, i3_vec3_t b);
static inline float i3_vec3_dot(i3_vec3_t a, i3_vec3_t b);
static inline float i3_vec3_len2(i3_vec3_t a);
static inline float i3_vec3_len(i3_vec3_t a);
static inline i3_vec3_t i3_vec3_normalize(i3_vec3_t a);
static inline bool i3_vec3_eq(i3_vec3_t a, i3_vec3_t b, float epsilon);
static inline bool i3_vec3_neq(i3_vec3_t a, i3_vec3_t b, float epsilon);
static inline const char* i3_vec3_str(i3_vec3_t a);

// i3_vec4_t
typedef struct i3_vec4_t
{
    union
    {
        float v[4];
        struct
        {
            float x;
            float y;
            float z;
            float w;
        };
    };
} i3_vec4_t;

static inline i3_vec4_t i3_vec4(float x, float y, float z, float w);
static inline i3_vec4_t i3_vec4_set(float v);
static inline i3_vec4_t i3_vec4_zero();
static inline i3_vec4_t i3_vec4_one();
static inline i3_vec4_t i3_vec4_neg(i3_vec4_t a);
static inline i3_vec4_t i3_vec4_abs(i3_vec4_t a);
static inline i3_vec4_t i3_vec4_saturate(i3_vec4_t a);
static inline i3_vec4_t i3_vec4_add(i3_vec4_t a, i3_vec4_t b);
static inline i3_vec4_t i3_vec4_sub(i3_vec4_t a, i3_vec4_t b);
static inline i3_vec4_t i3_vec4_mul(i3_vec4_t a, i3_vec4_t b);
static inline i3_vec4_t i3_vec4_div(i3_vec4_t a, i3_vec4_t b);
static inline i3_vec4_t i3_vec4_min(i3_vec4_t a, i3_vec4_t b);
static inline i3_vec4_t i3_vec4_max(i3_vec4_t a, i3_vec4_t b);
static inline i3_vec4_t i3_vec4_scale(i3_vec4_t a, float s);
static inline i3_vec4_t i3_vec4_clamp(i3_vec4_t a, i3_vec4_t min, i3_vec4_t max);
static inline float i3_vec4_dot(i3_vec4_t a, i3_vec4_t b);
static inline float i3_vec4_len2(i3_vec4_t a);
static inline float i3_vec4_len(i3_vec4_t a);
static inline i3_vec4_t i3_vec4_normalize(i3_vec4_t a);
static inline bool i3_vec4_eq(i3_vec4_t a, i3_vec4_t b, float epsilon);
static inline bool i3_vec4_neq(i3_vec4_t a, i3_vec4_t b, float epsilon);
static inline const char* i3_vec4_str(i3_vec4_t a);

// implementation of i3_vec2_t
static inline i3_vec2_t i3_vec2(float x, float y)
{
    i3_vec2_t r;
    r.x = x;
    r.y = y;
    return r;
}

static inline i3_vec2_t i3_vec2_set(float v)
{
    i3_vec2_t r;
    r.x = v;
    r.y = v;
    return r;
}

static inline i3_vec2_t i3_vec2_zero()
{
    return i3_vec2_set(0);
}

static inline i3_vec2_t i3_vec2_one()
{
    return i3_vec2_set(1);
}

static inline i3_vec2_t i3_vec2_neg(i3_vec2_t a)
{
    i3_vec2_t r;
    r.x = -a.x;
    r.y = -a.y;
    return r;
}

static inline i3_vec2_t i3_vec2_abs(i3_vec2_t a)
{
    i3_vec2_t r;
    r.x = i3_absf(a.x);
    r.y = i3_absf(a.y);
    return r;
}

static inline i3_vec2_t i3_vec2_saturate(i3_vec2_t a)
{
    i3_vec2_t r;
    r.x = i3_saturatef(a.x);
    r.y = i3_saturatef(a.y);
    return r;
}

static inline i3_vec2_t i3_vec2_add(i3_vec2_t a, i3_vec2_t b)
{
    i3_vec2_t r;
    r.x = a.x + b.x;
    r.y = a.y + b.y;
    return r;
}

static inline i3_vec2_t i3_vec2_sub(i3_vec2_t a, i3_vec2_t b)
{
    i3_vec2_t r;
    r.x = a.x - b.x;
    r.y = a.y - b.y;
    return r;
}

static inline i3_vec2_t i3_vec2_mul(i3_vec2_t a, i3_vec2_t b)
{
    i3_vec2_t r;
    r.x = a.x * b.x;
    r.y = a.y * b.y;
    return r;
}

static inline i3_vec2_t i3_vec2_div(i3_vec2_t a, i3_vec2_t b)
{
    i3_vec2_t r;
    r.x = a.x / b.x;
    r.y = a.y / b.y;
    return r;
}

static inline i3_vec2_t i3_vec2_min(i3_vec2_t a, i3_vec2_t b)
{
    i3_vec2_t r;
    r.x = i3_minf(a.x, b.x);
    r.y = i3_minf(a.y, b.y);
    return r;
}

static inline i3_vec2_t i3_vec2_max(i3_vec2_t a, i3_vec2_t b)
{
    i3_vec2_t r;
    r.x = i3_maxf(a.x, b.x);
    r.y = i3_maxf(a.y, b.y);
    return r;
}

static inline i3_vec2_t i3_vec2_scale(i3_vec2_t a, float s)
{
    i3_vec2_t r;
    r.x = a.x * s;
    r.y = a.y * s;
    return r;
}

static inline i3_vec2_t i3_vec2_clamp(i3_vec2_t a, i3_vec2_t min, i3_vec2_t max)
{
    i3_vec2_t r;
    r.x = i3_clampf(a.x, min.x, max.x);
    r.y = i3_clampf(a.y, min.y, max.y);
    return r;
}

static inline float i3_vec2_dot(i3_vec2_t a, i3_vec2_t b)
{
    float r = 0.0f;
    r += a.x * b.x;
    r += a.y * b.y;
    return r;
}

static inline float i3_vec2_len2(i3_vec2_t a)
{
    return i3_vec2_dot(a, a);
}

static inline float i3_vec2_len(i3_vec2_t a)
{
    return i3_sqrtf(i3_vec2_len2(a));
}

static inline i3_vec2_t i3_vec2_normalize(i3_vec2_t a)
{
    i3_vec2_t r;
    float len = i3_vec2_len(a);
    r.x = a.x / len;
    r.y = a.y / len;
    return r;
}

static inline bool i3_vec2_eq(i3_vec2_t a, i3_vec2_t b, float epsilon)
{
    for (int i = 0; i < 2; ++i)
        if (!i3_eqf(a.v[i], b.v[i], epsilon))
            return false;
    return true;
}

static inline bool i3_vec2_neq(i3_vec2_t a, i3_vec2_t b, float epsilon)
{
    return !i3_vec2_eq(a, b, epsilon);
}

static inline const char* i3_vec2_str(i3_vec2_t a)
{
    static char str[32];
    snprintf(str, sizeof(str), "[%f %f]", a.x, a.y);
    return str;
}

// implementation of i3_vec3_t
static inline i3_vec3_t i3_vec3(float x, float y, float z)
{
    i3_vec3_t r;
    r.x = x;
    r.y = y;
    r.z = z;
    return r;
}

static inline i3_vec3_t i3_vec3_set(float v)
{
    i3_vec3_t r;
    r.x = v;
    r.y = v;
    r.z = v;
    return r;
}

static inline i3_vec3_t i3_vec3_zero()
{
    return i3_vec3_set(0);
}

static inline i3_vec3_t i3_vec3_one()
{
    return i3_vec3_set(1);
}

static inline i3_vec3_t i3_vec3_neg(i3_vec3_t a)
{
    i3_vec3_t r;
    r.x = -a.x;
    r.y = -a.y;
    r.z = -a.z;
    return r;
}

static inline i3_vec3_t i3_vec3_abs(i3_vec3_t a)
{
    i3_vec3_t r;
    r.x = i3_absf(a.x);
    r.y = i3_absf(a.y);
    r.z = i3_absf(a.z);
    return r;
}

static inline i3_vec3_t i3_vec3_saturate(i3_vec3_t a)
{
    i3_vec3_t r;
    r.x = i3_saturatef(a.x);
    r.y = i3_saturatef(a.y);
    r.z = i3_saturatef(a.z);
    return r;
}

static inline i3_vec3_t i3_vec3_add(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = a.x + b.x;
    r.y = a.y + b.y;
    r.z = a.z + b.z;
    return r;
}

static inline i3_vec3_t i3_vec3_sub(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = a.x - b.x;
    r.y = a.y - b.y;
    r.z = a.z - b.z;
    return r;
}

static inline i3_vec3_t i3_vec3_mul(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = a.x * b.x;
    r.y = a.y * b.y;
    r.z = a.z * b.z;
    return r;
}

static inline i3_vec3_t i3_vec3_div(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = a.x / b.x;
    r.y = a.y / b.y;
    r.z = a.z / b.z;
    return r;
}

static inline i3_vec3_t i3_vec3_min(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = i3_minf(a.x, b.x);
    r.y = i3_minf(a.y, b.y);
    r.z = i3_minf(a.z, b.z);
    return r;
}

static inline i3_vec3_t i3_vec3_max(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = i3_maxf(a.x, b.x);
    r.y = i3_maxf(a.y, b.y);
    r.z = i3_maxf(a.z, b.z);
    return r;
}

static inline i3_vec3_t i3_vec3_scale(i3_vec3_t a, float s)
{
    i3_vec3_t r;
    r.x = a.x * s;
    r.y = a.y * s;
    r.z = a.z * s;
    return r;
}

static inline i3_vec3_t i3_vec3_clamp(i3_vec3_t a, i3_vec3_t min, i3_vec3_t max)
{
    i3_vec3_t r;
    r.x = i3_clampf(a.x, min.x, max.x);
    r.y = i3_clampf(a.y, min.y, max.y);
    r.z = i3_clampf(a.z, min.z, max.z);
    return r;
}

static inline i3_vec3_t i3_vec3_cross(i3_vec3_t a, i3_vec3_t b)
{
    i3_vec3_t r;
    r.x = a.y * b.z - a.z * b.y;
    r.y = a.z * b.x - a.x * b.z;
    r.z = a.x * b.y - a.y * b.x;
    return r;
}

static inline float i3_vec3_dot(i3_vec3_t a, i3_vec3_t b)
{
    float r = 0.0f;
    r += a.x * b.x;
    r += a.y * b.y;
    r += a.z * b.z;
    return r;
}

static inline float i3_vec3_len2(i3_vec3_t a)
{
    return i3_vec3_dot(a, a);
}

static inline float i3_vec3_len(i3_vec3_t a)
{
    return i3_sqrtf(i3_vec3_len2(a));
}

static inline i3_vec3_t i3_vec3_normalize(i3_vec3_t a)
{
    i3_vec3_t r;
    float len = i3_vec3_len(a);
    r.x = a.x / len;
    r.y = a.y / len;
    r.z = a.z / len;
    return r;
}

static inline bool i3_vec3_eq(i3_vec3_t a, i3_vec3_t b, float epsilon)
{
    for (int i = 0; i < 3; ++i)
        if (!i3_eqf(a.v[i], b.v[i], epsilon))
            return false;
    return true;
}

static inline bool i3_vec3_neq(i3_vec3_t a, i3_vec3_t b, float epsilon)
{
    return !i3_vec3_eq(a, b, epsilon);
}

static inline const char* i3_vec3_str(i3_vec3_t a)
{
    static char str[48];
    snprintf(str, sizeof(str), "[%f %f %f]", a.x, a.y, a.z);
    return str;
}

// implementation of i3_vec4_t
static inline i3_vec4_t i3_vec4(float x, float y, float z, float w)
{
    i3_vec4_t r;
    r.x = x;
    r.y = y;
    r.z = z;
    r.w = w;
    return r;
}

static inline i3_vec4_t i3_vec4_set(float v)
{
    i3_vec4_t r;
    r.x = v;
    r.y = v;
    r.z = v;
    r.w = v;
    return r;
}

static inline i3_vec4_t i3_vec4_zero()
{
    return i3_vec4_set(0);
}

static inline i3_vec4_t i3_vec4_one()
{
    return i3_vec4_set(1);
}

static inline i3_vec4_t i3_vec4_neg(i3_vec4_t a)
{
    i3_vec4_t r;
    r.x = -a.x;
    r.y = -a.y;
    r.z = -a.z;
    r.w = -a.w;
    return r;
}

static inline i3_vec4_t i3_vec4_abs(i3_vec4_t a)
{
    i3_vec4_t r;
    r.x = i3_absf(a.x);
    r.y = i3_absf(a.y);
    r.z = i3_absf(a.z);
    r.w = i3_absf(a.w);
    return r;
}

static inline i3_vec4_t i3_vec4_saturate(i3_vec4_t a)
{
    i3_vec4_t r;
    r.x = i3_saturatef(a.x);
    r.y = i3_saturatef(a.y);
    r.z = i3_saturatef(a.z);
    r.w = i3_saturatef(a.w);
    return r;
}

static inline i3_vec4_t i3_vec4_add(i3_vec4_t a, i3_vec4_t b)
{
    i3_vec4_t r;
    r.x = a.x + b.x;
    r.y = a.y + b.y;
    r.z = a.z + b.z;
    r.w = a.w + b.w;
    return r;
}

static inline i3_vec4_t i3_vec4_sub(i3_vec4_t a, i3_vec4_t b)
{
    i3_vec4_t r;
    r.x = a.x - b.x;
    r.y = a.y - b.y;
    r.z = a.z - b.z;
    r.w = a.w - b.w;
    return r;
}

static inline i3_vec4_t i3_vec4_mul(i3_vec4_t a, i3_vec4_t b)
{
    i3_vec4_t r;
    r.x = a.x * b.x;
    r.y = a.y * b.y;
    r.z = a.z * b.z;
    r.w = a.w * b.w;
    return r;
}

static inline i3_vec4_t i3_vec4_div(i3_vec4_t a, i3_vec4_t b)
{
    i3_vec4_t r;
    r.x = a.x / b.x;
    r.y = a.y / b.y;
    r.z = a.z / b.z;
    r.w = a.w / b.w;
    return r;
}

static inline i3_vec4_t i3_vec4_min(i3_vec4_t a, i3_vec4_t b)
{
    i3_vec4_t r;
    r.x = i3_minf(a.x, b.x);
    r.y = i3_minf(a.y, b.y);
    r.z = i3_minf(a.z, b.z);
    r.w = i3_minf(a.w, b.w);
    return r;
}

static inline i3_vec4_t i3_vec4_max(i3_vec4_t a, i3_vec4_t b)
{
    i3_vec4_t r;
    r.x = i3_maxf(a.x, b.x);
    r.y = i3_maxf(a.y, b.y);
    r.z = i3_maxf(a.z, b.z);
    r.w = i3_maxf(a.w, b.w);
    return r;
}

static inline i3_vec4_t i3_vec4_scale(i3_vec4_t a, float s)
{
    i3_vec4_t r;
    r.x = a.x * s;
    r.y = a.y * s;
    r.z = a.z * s;
    r.w = a.w * s;
    return r;
}

static inline i3_vec4_t i3_vec4_clamp(i3_vec4_t a, i3_vec4_t min, i3_vec4_t max)
{
    i3_vec4_t r;
    r.x = i3_clampf(a.x, min.x, max.x);
    r.y = i3_clampf(a.y, min.y, max.y);
    r.z = i3_clampf(a.z, min.z, max.z);
    r.w = i3_clampf(a.w, min.w, max.w);
    return r;
}

static inline float i3_vec4_dot(i3_vec4_t a, i3_vec4_t b)
{
    float r = 0.0f;
    r += a.x * b.x;
    r += a.y * b.y;
    r += a.z * b.z;
    r += a.w * b.w;
    return r;
}

static inline float i3_vec4_len2(i3_vec4_t a)
{
    return i3_vec4_dot(a, a);
}

static inline float i3_vec4_len(i3_vec4_t a)
{
    return i3_sqrtf(i3_vec4_len2(a));
}

static inline i3_vec4_t i3_vec4_normalize(i3_vec4_t a)
{
    i3_vec4_t r;
    float len = i3_vec4_len(a);
    r.x = a.x / len;
    r.y = a.y / len;
    r.z = a.z / len;
    r.w = a.w / len;
    return r;
}

static inline bool i3_vec4_eq(i3_vec4_t a, i3_vec4_t b, float epsilon)
{
    for (int i = 0; i < 4; ++i)
        if (!i3_eqf(a.v[i], b.v[i], epsilon))
            return false;
    return true;
}

static inline bool i3_vec4_neq(i3_vec4_t a, i3_vec4_t b, float epsilon)
{
    return !i3_vec4_eq(a, b, epsilon);
}

static inline const char* i3_vec4_str(i3_vec4_t a)
{
    static char str[64];
    snprintf(str, sizeof(str), "[%f %f %f %f]", a.x, a.y, a.z, a.w);
    return str;
}
